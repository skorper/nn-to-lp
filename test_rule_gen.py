from rule_gen import RuleGenerator
import subprocess
from subprocess import DEVNULL
from converter import Converter
from nnlp import NeuralNetworkLP

def convert_binary_to_vars(binary, prefix):
	vars = []
	for i in range(len(binary)):
		if binary[i] == '1':
			vars.append(prefix + str(len(binary) - i - 1))
	return vars

def get_clingo_result(output):
	prev = ""
	for line in output:
		if "Answer" in prev:
			return line.split()
		prev = line
	return None

def generate_input_vars(size, prefix):
	input = []
	for i in range(size-1, -1, -1):
		input.append(prefix + str(i))
	return input

def run_clingo(filename, args = []):
	try:
		clingo_output = subprocess.check_output(["clingo", filename, *args], stderr=DEVNULL)
		true_atoms = get_clingo_result(clingo_output)
	except subprocess.CalledProcessError as e:
		output = str(e.output)
		finished = output.split("\\n")
		true_atoms = get_clingo_result(finished)
	return true_atoms

total_length = 4
fractional_size = 2

rule_gen = RuleGenerator(_verbose = False, _k =fractional_size, _size = total_length)
nnlp = NeuralNetworkLP(None, None, None, None, _k = fractional_size, _longest = total_length)


num1 = generate_input_vars(total_length, "x")
num2 = generate_input_vars(total_length, "y")


f = open("test.lp", "w+")

result = rule_gen.multiply(num1, num2)

print ("result: " + str(result))

rule_gen.print_rules(f)

a = 0.5
b = 2.0

n1 = str(nnlp.convert_to_binary(a))
n2 = str(nnlp.convert_to_binary(b))
print (n1 + " + " + n2 + " = " + str(a + b))

vars = convert_binary_to_vars(n1, "x")
vars.extend(convert_binary_to_vars(n2, "y"))

for var in vars:
	f.write(var + ".\n")

f.write ("#show s.\n")

f.close()

atoms = run_clingo("test.lp")

print ("atoms: " + str(atoms))
original_lp_result = ""

for var in result:
	if var in atoms:
		# print (1, end =" ")
		original_lp_result += "1"
	else:
		# print (0, end =" ")
		original_lp_result += "0"
print()

print (original_lp_result)
print (nnlp.convert_from_binary(original_lp_result))


### Converter Code ###
# TODO modularize

'''
	Filenames:
		test.lp 		: file generated by nnlp.pym
		test_ch.lp 		: file converted to charan format
		test_ch_simp.lp : file simplified using Charans simplifier
		test_simp.lp 	: simplified lp
'''

'''
print ("Converting LP to simplifier format")

converter = Converter("_ch")
converter.convert_to("test.lp")

print ("Running Java simplifier")

try:
	cmd = ['java', 'SimplifyProgramInput_2', 'test_ch.lp', 'test_ch_simp.lp']
	subprocess.check_output(cmd)#, stderr=DEVNULL)
except subprocess.CalledProcessError as e:
	print ("Error: " + str(e))

print ("Converting simplified LP to clingo format")


converter.convert_from("test_ch_simp.lp")

print ("Running logic program")

atoms_simplified = run_clingo("test_simp.lp")
simplified_lp_result = ""

print ("Verifying result...")

for var in result:
	if var in atoms_simplified:
		# print (1, end =" ")
		simplified_lp_result += "1"
	else:
		# print (0, end =" ")
		simplified_lp_result += "0"

print ("original logic program result:   " + original_lp_result)
print ("simplified logic program result: " + simplified_lp_result)
if original_lp_result != simplified_lp_result:
	print ("They do not match. Therefore, the simplified logic program does not represent the same rules.")
else:
	print ("They match. Therefore, the simplified logic program represents the same rules.")
'''